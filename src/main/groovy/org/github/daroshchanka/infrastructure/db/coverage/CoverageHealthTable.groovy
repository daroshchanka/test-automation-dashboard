package org.github.daroshchanka.infrastructure.db.coverage


import groovy.sql.Sql
import org.github.daroshchanka.agents.coverage.CoverageHealthRecord
import org.github.daroshchanka.infrastructure.db.ITable
import org.github.daroshchanka.infrastructure.db.JdbcService

class CoverageHealthTable implements ITable<CoverageHealthRecord> {

  private Sql sql

  CoverageHealthTable(Sql sql = JdbcService.sql) {
    this.sql = sql
  }

  @Override
  void init() {
    sql.execute(
        '''
            CREATE TABLE IF NOT EXISTS launch (
                id                  INTEGER GENERATED BY DEFAULT AS IDENTITY,
                project             VARCHAR(255),
                platform            VARCHAR(255),
                overall_coverage    NUMERIC(5, 2),
                overall_possible    INTEGER,
                overall_automated   INTEGER,
                overall_total       INTEGER,
                critical_coverage   NUMERIC(5, 2),
                critical_possible   INTEGER,
                critical_automated  INTEGER,
                critical_total      INTEGER,
                health              NUMERIC(5, 2),
                created_at          TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
            )
            '''
    )
  }

  @Override
  void insert(CoverageHealthRecord record) {
    sql.execute(
        """
        INSERT INTO launch (
            project, platform, overall_coverage, overall_possible, overall_automated, overall_total, 
            critical_coverage, critical_possible, critical_automated, critical_total, health
        ) VALUES (
            '${record.metadata.project}', '${record.metadata.platform}', '${record.overall.coverage.round(2)}', 
             '${record.overall.possible}', '${record.overall.automated}', '${record.overall.total}',
            '${record.byCritical.coverage.round(2)}',  '${record.byCritical.possible}', '${record.byCritical.automated}', 
            '${record.byCritical.total}', '${record.health}'
        )   
        """.toString()
    )
  }
}
