package org.github.daroshchanka.infrastructure.db.launch


import groovy.sql.Sql
import org.github.daroshchanka.agents.launch.LaunchHealthRecord
import org.github.daroshchanka.infrastructure.db.ITable
import org.github.daroshchanka.infrastructure.db.JdbcService

class LaunchHealthTable implements ITable<LaunchHealthRecord> {

  private Sql sql

  LaunchHealthTable(Sql sql = JdbcService.sql) {
    this.sql = sql
  }

  @Override
  void init() {
    //sql.execute('DROP TABLE launch')
    sql.execute(
        '''
            CREATE TABLE IF NOT EXISTS launch (
                id                  INTEGER GENERATED BY DEFAULT AS IDENTITY,
                project             VARCHAR(255),
                launch_name         VARCHAR(255),
                launch_type         VARCHAR(255),
                platform            VARCHAR(255),
                reliability         NUMERIC(5, 2),
                duration_minutes    NUMERIC(14, 2),
                tests_count         INTEGER,
                launch_frequency    NUMERIC(6, 2),
                health              NUMERIC(5, 2),
                created_at          TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
            )
            '''
    )
  }

  @Override
  void insert(LaunchHealthRecord record) {
    sql.execute(
        """
        INSERT INTO launch (
            project, launch_name, launch_type, platform, reliability, 
            duration_minutes, tests_count, launch_frequency, health
        ) VALUES (
            '${record.metadata.project}', '${record.metadata.launchName}', '${record.metadata.launchType}', 
            '${record.metadata.platform}', '${record.calculations.reliability.round(2)}', 
            '${record.calculations.duration.round(2)}', '${record.calculations.testsCount}', 
            '${record.calculations.launchFrequency.round(2)}', '${record.calculations.health.round(2)}'
        )   
        """.toString()
    )
  }
}
